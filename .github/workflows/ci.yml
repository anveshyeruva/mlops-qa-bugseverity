name: CI

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  test-train-serve:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Run only fast tests that don't require artifacts/API
      - name: Unit tests (fast)
        run: pytest -q -m "not integration"

      - name: Train model
        run: python src/train.py --data data/bugs.csv --outdir models

      - name: QA gate (compare to baseline)
        run: python scripts/qa_gate.py

      - name: Start API (background)
        run: |
          echo "PWD=$(pwd)"
          ls -l
          ls -l models || true
          # Accept either filename
          test -f models/model.joblib || test -f models/model.pkl || (echo "model missing"; exit 1)
          nohup uvicorn src.api:app --host 127.0.0.1 --port 8000 > uvicorn.log 2>&1 &
          sleep 3
          echo "---- uvicorn.log (tail) ----"
          tail -n +1 uvicorn.log | sed -n '1,80p' || true

      - name: Wait for /health
        shell: bash
        run: |
          set -e
          for i in {1..20}; do
            BODY=$(curl -s http://127.0.0.1:8000/health || true)
            echo "Attempt $i: $BODY"
            if echo "$BODY" | grep -qi "ok"; then
              echo "API is healthy."
              exit 0
            fi
            sleep 1
          done
          echo "API did not become healthy in time."
          echo "---- uvicorn.log (last 200) ----"
          tail -n 200 uvicorn.log || true
          exit 1

      - name: Invoke /predict (smoke)
        run: |
          set -e
          REQ='{"title":"App crash opening settings","description":"App crashes when navigating to the settings page on Android 13"}'
          RESP=$(curl -s -X POST http://127.0.0.1:8000/predict -H "Content-Type: application/json" -d "$REQ" || true)
          echo "Response: $RESP"
          echo "$RESP" | grep -q "{"

      - name: Show API logs on success (short)
        if: success()
        run: |
          echo "---- uvicorn.log (last 60) ----"
          tail -n 60 uvicorn.log || true

      - name: Upload API log (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: uvicorn-log
          path: uvicorn.log

  registry-smoke:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: test-train-serve  # run after unit tests pass

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start MLflow server (ephemeral, SQLite backend)
        run: |
          nohup mlflow server \
            --backend-store-uri sqlite:////tmp/mlflow.db \
            --default-artifact-root file:/tmp/mlruns \
            --host 127.0.0.1 --port 5000 > mlflow.log 2>&1 &
          for i in {1..30}; do
            curl -s http://127.0.0.1:5000 > /dev/null && break
            sleep 1
          done
          curl -s http://127.0.0.1:5000 > /dev/null || (echo "MLflow did not start"; tail -n +1 mlflow.log | sed -n '1,120p'; exit 1)

      - name: Train + log + register (→ Staging)
        env:
          MLFLOW_TRACKING_URI: http://127.0.0.1:5000
        run: |
          python src/train.py --data data/bugs.csv --outdir models --mlflow --registry-name bug-severity-clf

      - name: Promote latest Staging → Production
        env:
          MLFLOW_TRACKING_URI: http://127.0.0.1:5000
        run: |
          python - <<'PY'
          from mlflow.tracking import MlflowClient
          name = "bug-severity-clf"
          c = MlflowClient()
          versions = c.search_model_versions(f"name='{name}'")
          staging = sorted([v for v in versions if v.current_stage == "Staging"], key=lambda v: int(v.version))
          if not staging:
              raise SystemExit("No Staging versions found to promote.")
          latest = staging[-1]
          c.transition_model_version_stage(name=name, version=latest.version, stage="Production", archive_existing_versions=False)
          print(f"Promoted {name} v{latest.version} → Production")
          PY

      - name: Verify Production version exists
        env:
          MLFLOW_TRACKING_URI: http://127.0.0.1:5000
        run: |
          python - <<'PY'
          from mlflow.tracking import MlflowClient
          name = "bug-severity-clf"
          c = MlflowClient()
          versions = c.search_model_versions(f"name='{name}'")
          prod = [v for v in versions if v.current_stage == "Production"]
          assert len(prod) >= 1, "No Production version in registry"
          print(f"OK: Found {len(prod)} Production version(s) for {name}.")
          PY

      - name: Upload MLflow log (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mlflow-log
          path: mlflow.log

